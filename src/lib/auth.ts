//this a lib funtion which will help us provide the auth options 

import { NextAuthOptions } from "next-auth";
import { UpstashRedisAdapter } from "@next-auth/upstash-redis-adapter";import { db } from "./db";
import GoogleProvider from "next-auth/providers/google";

const getGoogleCredenentials = ()=>{
    const clientId = process.env.GOOGLE_CLIENT_ID
    const clientSecret = process.env.GOOGLE_CLIENT_SECRET

    if( !clientId || clientId.length == 0 ) {
        throw new Error('Missing GOOGLE_CLIENT_ID')
    }
    if( !clientSecret|| clientSecret.length == 0 ) {
        throw new Error('Missing GOOGLE_CLIENT_SECRET')
    }
    return {
        clientId,
        clientSecret
    }
}
// the above function is to check if any errors occurs when fetching them or if you forget to initilise those values which will be super helpful in prod

export const authOptions: NextAuthOptions = {
    adapter: UpstashRedisAdapter(db),
    session: {
        strategy: 'jwt'//session is not stored in db
    },
    pages: {
        signIn:'/login'
    },
    providers: [
        GoogleProvider({
            clientId: getGoogleCredenentials().clientId,
            clientSecret: getGoogleCredenentials().clientSecret
        })
    ],
    callbacks:{
        async jwt ({token, user}) {
            const dbUSer = (await db.get(`user:${token.id}`)) as User | null 

            if(!dbUSer) {
                token.id = user!.id //the ! is cus we know that the type is present 
                return token;
            }

            return{
                id:dbUSer.id,
                name:dbUSer.name,
                email:dbUSer.email,
                picture:dbUSer.image,
            }
        },
        async session({session,token}){
            if(token){
                session.user.id = token.id
                session.user.name = token.name
                session.user.email = token.email
                session.user.image = token.picture
            }
            return session
        },
        redirect() {
            return '/dashboard'
        }
    }
}

//adapter what it does is when a user signs up using their google account it directly puts that details in the db 
//we can install one adapter i.e upstasg redis adapter

// so the callbacks in here are used to handle certain events that are occuring in the auth
//jwt async function can be used to check if the user is in the db
//token is auto generated by the adapter